package templates

import "github.com/gevulotnetwork/devnet-explorer/model"
import "time"
import "net/url"
import "fmt"
import "strings"

const (
	EventTXRow = "tx-row"
)

templ Index() {
	<!DOCTYPE html>
	<html lang="en">
		@head()
		<body class="">
			<div id="container">
				@header()
				@Stats(model.Stats{}, time.Millisecond)
				@Table(nil, url.Values{})
				@footer()
			</div>
		</body>
	</html>
}

templ Stats(stats model.Stats, interval time.Duration) {
	<div id="stats" hx-get="/api/v1/stats" hx-trigger={ "every " + interval.String() } hx-swap="outerHTML">
		<div id="left-stats">
			<div class="number-block">
				<div class="rolling-number" id="registered_users">{ format(stats.RegisteredUsers) }</div>
				<div class="stat-bottom-row">
					<div class="number-title">Registered Users</div>
					<div class="stat-delta">{ formatPercentage(stats.RegisteredUsersDelta) }</div>
				</div>
			</div>
			<div class="number-block">
				<div class="rolling-number" id="provers_deployed">{ format(stats.ProversDeployed) }</div>
				<div class="stat-bottom-row">
					<div class="number-title">Provers Deployed</div>
					<div class="stat-delta">{ formatPercentage(stats.ProversDeployedDelta) }</div>
				</div>
			</div>
		</div>
		<div id="right-stats">
			<div class="number-block">
				<div class="rolling-number" id="proofs_generated">{ format(stats.ProofsGenerated) }</div>
				<div class="stat-bottom-row">
					<div class="number-title">Proofs Generated</div>
					<div class="stat-delta">{ formatPercentage(stats.ProofsGeneratedDelta) }</div>
				</div>
			</div>
			<div class="number-block">
				<div class="rolling-number" id="proofs_verified">{ format(stats.ProofsVerified) }</div>
				<div class="stat-bottom-row">
					<div class="number-title">Proof Verifications</div>
					<div class="stat-delta">{ formatPercentage(stats.ProofsVerifiedDelta) }</div>
				</div>
			</div>
		</div>
	</div>
}

templ Table(events []model.Event, query url.Values) {
	<div id="table">
		<div class="thead">
			<div class="left">
				<div class="th">State</div>
				<div class="th">Transaction ID</div>
			</div>
			<div class="right">
				<div class="th">Prover ID</div>
				<div class="th">Time</div>
				<div class="th"></div>
			</div>
		</div>
		<div class="tbody" hx-ext="sse" sse-connect={ "/api/v1/stream?" + query.Encode() } sse-swap={ EventTXRow } hx-swap="afterbegin">
			for _, e := range events {
				@Row(e)
			}
		</div>
	</div>
}

templ Row(e model.Event) {
	<div class="tr">
		<div class="left">
			<div class="td">
				<div class="mobile-label">State</div>
				<div>
					<span class={ "tag", e.State }>{ e.State }</span>
				</div>
			</div>
			<div class="td">
				<div class="mobile-label">Transaction ID</div>
				<div>{ e.TxID }</div>
			</div>
		</div>
		<div class="right">
			<div class="td">
				<div class="mobile-label">Prover ID</div>
				<div>
					if e.Tag != "" {
						<span class="provider-tag">#{ e.Tag }</span>
					}
					<span>{ e.ProverID }</span>
				</div>
			</div>
			<div class="td">
				<div class="mobile-label">Time</div>
				<div>
					<span class="datetime">{ e.Timestamp.Format("03:04 PM, 02/01/06") }</span>
				</div>
			</div>
		</div>
	</div>
}

templ head() {
	<head>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width"/>
		<link rel="apple-touch-icon" sizes="180x180" href="https://gevulot.com/favicon/apple-touch-icon.png"/>
		<link rel="icon" type="image/png" sizes="32x32" href="https://gevulot.com/favicon/favicon-32x32.png"/>
		<link rel="icon" type="image/png" sizes="16x16" href="https://gevulot.com/favicon/favicon-16x16.png"/>
		<link rel="manifest" href="https://gevulot.com/favicon/site.webmanifest"/>
		<link rel="mask-icon" href="https://gevulot.com/favicon/safari-pinned-tab.svg" color="#000000"/>
		<link rel="shortcut icon" href="https://gevulot.com/favicon/favicon.ico"/>
		<meta name="msapplication-TileColor" content="#da532c"/>
		<meta name="msapplication-config" content="https://gevulot.com/favicon/browserconfig.xml"/>
		<meta name="theme-color" content="#000000"/>
		<meta property="og:image" content="https://www.gevulot.com/share/og-image.png"/>
		<meta name="twitter:image" content="https://www.gevulot.com/share/og-image.png"/>
		<meta name="twitter:card" content="summary_large_image"/>
		<meta name="twitter:site" content="@gevulot_network"/>
		<meta property="og:title" content="Introducing Gevulot"/>
		<meta property="og:description" content="Devnet Explorer"/>
		<meta name="description" content="Devnet Explorer"/>
		<meta property="og:type" content="website"/>
		<meta property="og:site_name" content="Devnet Explorer"/>
		<title>Devnet Explorer</title>
		<link rel="stylesheet" href="assets/style.css"/>
		<script src="/assets/htmx.min.js"></script>
		<script src="/assets/sse.js"></script>
	</head>
}

templ header() {
	<div id="header">
		<div id="logo">Gevulot</div>
		<div id="live">Live<span class="dot"></span></div>
		<div id="range">
			<span id="1w" class="range-selector selected">1w</span>
			<span id="1m" class="range-selector">1m</span>
			<span id="6m" class="range-selector">6m</span>
			<span id="1y" class="range-selector">1y</span>
		</div>
		<div id="search">
			<input
				type="text"
				id="search-input"
				placeholder="Search"
				type="text"
				name="q"
				hx-get="/api/v1/events"
				hx-trigger="keyup changed delay:500ms"
				hx-target="#table"
			/>
		</div>
		<div id="mode">
			<div id="mode-wrap" hx-on:click="htmx.toggleClass(htmx.find('body'), 'dark');">
				<div id="mode-left-wrap">
					<span id="light-dot" class="dot"></span>
					<span id="light">Light</span>
				</div>
				<div id="mode-right-wrap">
					<span id="dark-dot" class="dot"></span>
					<span id="dark">Dark</span>
				</div>
			</div>
		</div>
	</div>
}

templ footer() {
	<div id="footer">
		<div id="copyright">Copyright Â©{ time.Now().Format("2006") } - Gevulot</div>
		<div id="links">
			<a href="https://twitter.com/gevulot_network" target="_blank">Twitter</a>
			<a href="https://docs.gevulot.com/" target="_blank">Docs</a>
			<a href="https://t.me/gevulot" target="_blank">Telegram</a>
			<a href="https://substack.com/profile/183978644-gevulot" target="_blank">Substack</a>
			<a href="https://github.com/gevulotnetwork/gevulot" target="_blank">Github</a>
			<a href="https://www.notion.so/gevulot/Gevulot-open-positions-21aba554609745cb84644bf00f9ace6d" target="_blank">We're hiring</a>
		</div>
	</div>
}

const suffixes = " kMGTPEZYRQ"

func format(i uint64) string {
	s := fmt.Sprintf("%d", i)
	d := (len(s) - 1) / 3
	return strings.TrimSpace(s[:((len(s)-1)%3)+1] + suffixes[d:d+1])
}

func formatPercentage(f float64) string {
	sign := "+"
	if f < 0 {
		sign = "-"
	}
	return fmt.Sprintf("%s%.2f%s", sign, f, "%")
}
